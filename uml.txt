@startuml

class PlayerContext
{
    - fsm: readonly FSM<WeaponState>
    - IWeapon AssembleWeapon()
    - bindings: List<InputHander.Bindings>
    - void SetupStates(weapon: IWeapon)
}

class FSM<T>
{
    - states: readonly Dictionary<Type, T>
    -current: T
    + void AddState(state: T)
    + void RemoveState(state: T)
    + void TransitionTo(state: Type)
    + void TransitionTo(state: T)
    + void Update()
    + List<T> GetStates()
}

interface IDamagable
{
    + void Damage(amount: float)
}

interface IState 
{
    + void EnterState()
    + void Update()
    + void ExitState()
}

interface IWeapon 
{
    + string GetName()
    + float GetReloadTime()
    + int GetMaxBullets()
    + float GetDamage()
    + float GetShootInterval()
    + float GetMaxBulletRange()
    + float GetSpread()
    + AudioClip GetShootSound()
    + AudioClip GetReloadSound()
}


class WeaponState implements IState
{
    # fsm: FSM<WeaponState>
    # inputHandler: InputHandler 
    # weapon: IWeapon
    # source: AudioSource 
    + void UpdateWeapon(weapon: IWeapon)
}

class BaseWeapon implements ScriptableObject, IWeapon
{
    + maxBullets: int
    + damage: float
    + shootInterval: float
    + maxBulletRange: float
    + shootSound: AudioClip
    + reloadSound: AudioClip
}

class WeaponDecorator implements ScriptableObject, IWeapon
{
    - weapon: IWeapon
    + IWeapon GetUnderlyingWeapon()
    + WeaponDecorator(weapon: IWeapon)
}

class SilencerDecorator implements WeaponDecorator
{
    + newSound: AudioClip
}

class ExtendedMagDecorator implements WeaponDecorator
{
    + bulletsGained: int
}

class SpreadDecorator implements WeaponDecorator
{
    + spread: float
}

class ReadyWeaponState implements WeaponState
{
    
}

class ReloadingWeaponState implements WeaponState
{
    + onReload : event Action
}

class ToggleDecoratorWeaponState implements WeaponState
{
    + onNewWeapon : event Action
}

PlayerContext ..> WeaponState
PoolableGameObject --* GameObjectPool
GameObjectPool ..> PoolableGameObject
LoadoutAssembler --* PlayerContext
ToggleDecoratorWeaponState ..> LoadoutAssembler
FSM --* PlayerContext
WeaponDecorator --* ToggleDecoratorWeaponState
Timer --* ToggleDecoratorWeaponState
Timer --* ReloadingWeaponState
IWeapon --* WeaponDecorator
FSM --* WeaponState
FSM ..> IState
InputHandler --* WeaponState
IWeapon --* WeaponState
InputHandler --* PlayerContext
GameObjectPool --* PlayerContext
ReadyWeaponState ..> IDamagable
ReadyWeaponState ..> GameObjectPool

@enduml